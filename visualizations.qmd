---
title: "Optoelectronics laboratory results"
format:
  html:
    toc: true
    toc-location: left
    html-math-method: katex
    theme: minty
    code-fold: true
    code-overflow: wrap
    code-tools: true
---

Including necessary libraries
```{python}
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl

import numpy as np
from scipy.signal import savgol_filter

from os import listdir
from os.path import isfile, join

import constants as const
import python_scripts as pys
```

# Photodiode forward and reverse, in dark and illuminated

$\mu$ - diode ideality factor can be calculated

Shockley diode equation: 

$$
I=I_0(e^{\frac{qU}{\mu KT}}-1)
$$
where: 

* $I [A]$ is diode current,
* $I_0 [A]$ is Dark Saturation Current,
* $q [C]$ is electron charge,
* $U [V]$ is voltage applied on the diode,
* $\mu$ is diode ideality factor,
* $K [\frac{J}{K}]$ is the Boltzmann constant,
* $T [K]$ is the temperature.

For _forward bias_, the "-1" is negligible.

Constants:
```{python}
print(f'k = {const.k:.6E}')
print(f'T = {const.T:.2f}')
print(f'q = {const.q:.9E}')
```


Exponential function can be, in general, pictured as:

$$
y = a e^{x b}
$$

so that:

$$
b = \frac{q}{\mu k T}
$$

and:

$$
\boxed{\mu = \frac{q}{bkT}}
$$

```{python}
def exp_func(x, a, b):
  return a * np.exp(b * x)

mu=dict()
```

## Under red LED

 Directory _/RED_LED_PD_mj/RED_LED_PD_mj/LVJPD_RED_1cm_BenchVue_30112022G1_

We will fit an exponential function to our obtained results, in forward and reverse case.

After fitting, we get $\mu$ for different illumination cases:

```{python}

dtF = pd.read_csv('datasets/RED_LED_PD_mj/RED_LED_PD_mj/LVJPD_RED_1cm_BenchVue_30112022G1/Ipd_Popt6_UpdF_30112022 2022-11-30 12-02-00 0 2022-11-30 12-42-42 0.csv',
  sep=',', skiprows=5)

dtR = pd.read_csv('datasets/RED_LED_PD_mj/RED_LED_PD_mj/LVJPD_RED_1cm_BenchVue_30112022G1/Ipd_Popt6_UpdR_30112022 2022-11-30 12-02-00 0 2022-11-30 12-03-12 0.csv',
  sep=',', skiprows=6)

cF = ['2 - Get Measurement Value', 'Get Measurement Value', '1 - Sweep CH2 Voltage Setting', '1 - Get CH2 Current Measurement']
cR = ['2 - Get Measurement Value', '3 - Get Measurement Value', '1 - Sweep CH2 Voltage Setting', '1 - Get CH2 Current Measurement']

muFR = pys.SweepPlotForwardReverse(dtF, dtR, cF, cR, 0, 27, exp_func)

plt.suptitle("Photodiode U / I characterictics")
plt.title("Variable red LED illumination")

plt.show()

mu['red_F'] = muFR[0]
mu['red_R'] = muFR[1]
```

## Under blue LED
Directory _/LVJ_PD_BVue_l1mm_02122022G2_

In `Ipd_Ufpd_Uled_0_6V 2022-12-02 11-32-27 0.csv` there is only one measured variable. Assumed this dataset is invalid.

```{python}
dataset=pd.read_csv('datasets/LVJ_PD_BVue_l1mm_02122022G2/Ipd_Urpd_Uled_0_6V 2022-12-02 10-29-07 0.csv', sep=',', skiprows=6)

ax, mu_calc = pys.SweepPlot(dataset, '2 - Get Measurement Value', '1 - Get Measurement Value', '3 - Sweep CH2 Voltage Setting', '3 - Get CH2 Current Measurement', 2, yScale=10**6, labelScale=1000, curveFitFunc=exp_func)

plt.legend(title='$I_{LED} [mA]$', loc='best')
# plt.yscale('log')
plt.suptitle('Photodiode reverse voltage versus photodiode reverse current')
plt.title('Variable blue LED illumination, 1 mm distance')
plt.xlabel('$U_{pd} [V]$')
plt.ylabel('$I_{pd} [nA]$')

plt.show()

mu['blu_R'] = mu_calc
```


## Under green LED

Directory _GREEN_LED_PD_mj\ILED_Green_Ipd_UpdUF_0_2V_

Ipd_UpdUF_0_2V_G_Popt0_6V 2022-12-06 10-31-19 0.csv
```{python}
dtF = pd.read_csv('datasets\GREEN_LED_PD_mj\ILED_Green_Ipd_UpdUF_0_2V\Ipd_UpdUF_0_2V_G_Popt0_6V 2022-12-06 10-31-19 0.csv', skiprows=6)
dtR = pd.read_csv('datasets\GREEN_LED_PD_mj\IpdUpdR_Green\IpdG_UpdR_V0_5V_Popt0_6V 2022-12-06 11-19-45 0.csv', skiprows=3)

dtR['Get Measurement Value.1'] = dtR['Get Measurement Value.1'] * (-1)

cF = ['2 - Get Measurement Value', '3 - Get Measurement Value', '1 - Sweep CH2 Voltage Setting', '1 - Get CH2 Current Measurement']
cR = ['Get Measurement Value.1', 'Get Measurement Value', 'Sweep CH2 Voltage Setting', 'Get CH2 Current Measurement']

muFR = pys.SweepPlotForwardReverse(dtF, dtR, cF, cR, 0, 27, exp_func)
plt.suptitle("Photodiode U / I characterictics")
plt.title("Variable green LED illumination")
plt.show()

mu['grn_F'] = muFR[0]
mu['grn_R'] = muFR[1]
```

# Photodiode ideality factor

```{python}
fig, axs = plt.subplots(2, 1, sharex=True, figsize=(7,7))

for key in mu:
  if key.split('_')[1] == 'F':
    axs[0].plot(mu[key]['i_led'], mu[key]['mu'], label=key.split('_')[0])

for key in mu:
  if key.split('_')[1] == 'R':
    axs[1].plot(mu[key]['i_led'], mu[key]['mu'], label=key.split('_')[0])

for ax in axs:
  ax.grid()
  ax.legend(loc='best')
  ax.set_ylabel('$\mu [-]$')

axs[0].set_title('Forward bias')
axs[1].set_xlabel('$I_{LED} [mA]$')
axs[1].set_title('Reverse bias')
plt.suptitle('Photodiode ideality factor vs illumination')
fig.tight_layout()
plt.show()
```

# LED Voltage-current characteristics

## Red LED

Directory _/RED_LED_PD_mj/Iled_Uled_RED_

```{python}
dataset=pd.read_csv('datasets/RED_LED_PD_mj/RED_LED_PD_mj/Iled_Uled_RED/IledRed_UledF_06V_50mV 2022-12-02 16-48-23 1.csv', sep=',')
plt.figure()
plt.plot(dataset['1 - Get CH2 Voltage Setting'], dataset['2 - Get Measurement Value Iled']*1000)
plt.grid()
plt.xlabel('$U_{LED}[V]$')
plt.ylabel('$I_{LED}[mA]$')
plt.title('Red LED voltage versus current')

plt.show()
```

## Blue LED

Directory _LVJ_OPTO_LEDtrans20122022_

```{python}

pys.PrintDataFromDirectory(directoryPath='datasets/LVJ_OPTO_LEDtrans20122022/LVJ_OPTO_LEDtrans20122022')

```

# LED transient characteristics

# Directory /LvJ_OPTO_2022_GE211222022

```{python}
pys.PrintDataFromDirectory(directoryPath="datasets\LVJ_OPTO_2022_GE21122022\LVJ_OPTO_2022_GE21122022")
```

## Directory /LvJ_OPTO_2022_GE211222022/LVJ_OPTO_2022_GE21122022/LED_R_0_5Vtr

```{python}
pys.PrintDataFromDirectory(directoryPath='datasets\LVJ_OPTO_2022_GE21122022\LVJ_OPTO_2022_GE21122022\LED_R_0_5Vtr')
```

## Directory /LvJ_OPTO_2022_GE211222022/LVJ_OPTO_2022_GE21122022/PD_dark

```{python}
pys.PrintDataFromDirectory(directoryPath='datasets\LVJ_OPTO_2022_GE21122022\LVJ_OPTO_2022_GE21122022\PD_dark')


```

# Photoresistor
Directory _/LED_PDetector_
```{python}
dataset=pd.read_csv('datasets/LVJ_PDetector/IpdF_Upd_15VBenchvue_29112022 2022-11-29 15-56-50.csv', sep=',', skiprows=4)
plt.figure()
plt.plot(dataset['1 - Get CH1 Voltage Measurement'], dataset['1 - Get CH1 Current Measurement']*1000)
plt.grid()
plt.xlabel('$U_{pd}[V]$')
plt.ylabel('$I_{pdF}[mA]$')
plt.title('Photoresistor voltage versus forward current')

plt.show()
```

# Directory LVJ_OPHO2022\LVJ_OPHO2022

To calculate current on the resistor, we can use following equation:
$$
I_{R} = \frac{U_{gen}-U_{pd}}{R}
$$

## photodiode b? f = 1kHZ, U_gen = +2V/-2V falling edge?

```{python}
pys.PlotOscVoltCurr(path_to_dir='datasets/LVJ_OPHO2022/LVJ_OPHO2022/', datasetBaseName='pd_b_f1ku2of1_', endings=('1','3','F1'), filterValues=True,
filteringCurrent=(200,5), filteringVoltage=(200,5))
```

## photodiode b? f = 1kHZ, U_gen = +2V/-2V rising edge
```{python}
pys.PlotOscVoltCurr(path_to_dir='datasets/LVJ_OPHO2022/LVJ_OPHO2022/', datasetBaseName='pd_b_f1ku2on4_', endings=('1','3','F1'))
```

## photodiode b? r1k? U_gen = +2V/-2V f?

```{python}
pys.PlotOscVoltCurr(path_to_dir='datasets/LVJ_OPHO2022/LVJ_OPHO2022/', datasetBaseName='pd_b_r1ku2f_', endings=('1','3','F1'))
```

## photodiode b? f = 1kHZ, U_gen = +2V/-2V pd_b_r1ku2r_1???

```{python}
pys.PlotOscVoltCurr(path_to_dir='datasets/LVJ_OPHO2022/LVJ_OPHO2022/', datasetBaseName='pd_b_r1ku2r_', endings=('1','3','F1'))
```


## photodiode d? f = 1kHZ, U_gen = +2V/-2V pd_d_f1ku2off1_1???

```{python}
pys.PlotOscVoltCurr(path_to_dir='datasets/LVJ_OPHO2022/LVJ_OPHO2022/', datasetBaseName='pd_d_f1ku2off1_', endings=('1','3','F1'))
```

## photodiode d? f = 1kHZ, U_gen = +2V/-2V pd_d_f1ku2onr1???


```{python}
pys.PlotSingleFile_OPHO(fileName='pd_d_f1ku2onr1.csv', filePath='datasets/LVJ_OPHO2022/LVJ_OPHO2022', filterValues=True,
filteringCurrent=(200, 5), filteringVoltage=(200,5))
```

## photodiode d? f = 1kHZ, U_gen = +2V/-2V pd_d_f1ku2onr6_1???
```{python}
pys.PlotOscVoltCurr(path_to_dir='datasets/LVJ_OPHO2022/LVJ_OPHO2022/', datasetBaseName='pd_d_f1ku2onr6_', endings=('1','3','F1'))
```

# Directory LVJ_OPHO2022\LVJ_OPHO2022\Blue\B_trans

## iled_bu5vf1khof2.csv???
```{python}
pys.PlotSingleFile_OPHO(fileName='iled_bu5vf1khof2.csv', filePath='datasets/LVJ_OPHO2022/LVJ_OPHO2022/Blue/B_trans', filterValues=True,
filteringCurrent=(200, 5), filteringVoltage=(200,5))
```


## iled_bu5vf1khon3

```{python}
pys.PlotSingleFile_OPHO(fileName='iled_bu5vf1khon3.csv', filePath='datasets/LVJ_OPHO2022/LVJ_OPHO2022/Blue/B_trans', filterValues=True,
filteringCurrent=(200, 5), filteringVoltage=(200,5))
```

## iled_bu5vf1khon4_1
```{python}
pys.PlotOscVoltCurr(path_to_dir='datasets\LVJ_OPHO2022\LVJ_OPHO2022\Blue\B_trans', datasetBaseName='iled_bu5vf1khon4_', endings=('1','3','F1'))
```

## iled_bu5vf1kt_1
```{python}
# pys.PlotOscVoltCurr(path_to_dir='datasets\LVJ_OPHO2022\LVJ_OPHO2022\Blue\B_trans', datasetBaseName='iled_bu5vf1kt_', endings=('1','3','F1'))
``` 
# Directory RED_LED_PD_mj/RED_LED_PD_mj/RED_transient/

## iPD_t_Rled15mA_Uf3V_off1V_f1kHz_off
```{python}

dataset = pd.read_csv('datasets\RED_LED_PD_mj\RED_LED_PD_mj\RED_transient\iPD_t_Rled15mA_Uf3V_off1V_f1kHz_off\Trace 2022-12-21 12-27-21 0.csv', skiprows=1, sep=',', usecols=['Time (s)','2 (VOLT)','3 (VOLT)','M1'])

resistance = 100.0 #
columnNames = dataset.columns
# Convert the voltage on the resistor (U_generator - U_photodiode) to current [mA] 
dataset[columnNames[3]] = dataset[columnNames[3]] / resistance * 1000
dataset[columnNames[0]] = (dataset[columnNames[0]] - dataset[columnNames[0]][0]) * 10**9# to nanoseconds, substract offset

pys.PlotVoltageCurrentDataset(dataset)

```
datasets\RED_LED_PD_mj\RED_LED_PD_mj\RED_transient\iPD_t_Rled15mA_Uf3V_off1V_f1kHz_off\Trace 2022-12-21 12-29-00 0.csv is the same file, but seperated with tabs


```{python}

dataset = pd.read_csv('datasets\RED_LED_PD_mj\RED_LED_PD_mj\RED_transient\iPD_t_Rled20mA_Uf3V_off1V_f1kHz\Trace 2022-12-21 13-13-35 0.csv', skiprows=1, sep=',', usecols=['Time (s)','2 (VOLT)','3 (VOLT)','M1'])

resistance = 100.0 #
columnNames = dataset.columns
# Convert the voltage on the resistor (U_generator - U_photodiode) to current [mA] 
dataset[columnNames[3]] = dataset[columnNames[3]] / resistance * 1000
dataset[columnNames[0]] = (dataset[columnNames[0]] - dataset[columnNames[0]][0]) * 10**9# to nanoseconds, substract offset

pys.PlotVoltageCurrentDataset(dataset)

```


# TODO Green LED

datasets\GREEN_LED_PD_mj\ILED_Green_Ipd_UpdUF_0_2V\Trans_ipd_Ustep_4V_Iled0A_Trace 2022-12-06 12-55-36 0.csv

```{python}

dataset = pd.read_csv('datasets\GREEN_LED_PD_mj\ILED_Green_Ipd_UpdUF_0_2V\Trans_ipd_Ustep_4V_Iled0A_Trace 2022-12-06 12-55-36 0.csv', skiprows=1, sep=',', usecols=['Time (s)','1 (VOLT)','2 (AMP)','M1'])

resistance = 100.0 #
columnNames = dataset.columns
# Convert the voltage on the resistor (U_generator - U_photodiode) to current [mA] 
dataset[columnNames[3]] = dataset[columnNames[3]] / resistance * 1000
dataset[columnNames[0]] = (dataset[columnNames[0]] - dataset[columnNames[0]][0]) * 10**9# to nanoseconds, substract offset

pys.PlotVoltageCurrentDataset(dataset)

```

# APS

```{python}
def PlotVoltageTime(dataset:pd.DataFrame, title = ' '):
    col = dataset.columns
    # print(dataset[col[0]][0])
    for i in range(1, len(dataset[col[0]])):
      dataset[col[0]][i] = dataset[col[0]][i] - dataset[col[0]][0]
      dataset[col[0]][i] *= 10**6
    dataset[col[0]][0] = 0
    plt.figure()
    plt.plot(dataset[col[0]], dataset[col[1]])
    plt.ylabel("Voltage [V]")
    plt.xlabel("Time [us]")
    plt.title(title)
    plt.grid()
    plt.show()

def PrintDataFromDirectoryVoltageTime(directoryPath: str, filterValues = True):
    onlyfiles = [
        f
        for f in listdir(directoryPath)
        if isfile(join(directoryPath, f)) and f[-4:] == ".csv"
    ]
    print(onlyfiles)
    for f in onlyfiles:
        dataset = pd.read_csv(directoryPath + f, sep=',', skiprows=[1])
        PlotVoltageTime(dataset=dataset, title=f)
PrintDataFromDirectoryVoltageTime('datasets/APS/')
```


