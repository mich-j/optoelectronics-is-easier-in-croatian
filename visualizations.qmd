---
title: "Optoelectronics laboratory results"
format:
  html:
    toc: true
    toc-location: left
    html-math-method: katex
    theme: minty
    code-fold: true
    code-overflow: wrap
    code-tools: true
---

Including necessary libraries
```{python}
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl

import numpy as np
from scipy.signal import savgol_filter

from os import listdir
from os.path import isfile, join

import constants as const
import python_scripts as pys
```

# Photoresistor
Directory _/LED_PDetector_
```{python}
dataset=pd.read_csv('datasets/LVJ_PDetector/IpdF_Upd_15VBenchvue_29112022 2022-11-29 15-56-50.csv', sep=',', skiprows=4)
plt.figure()
plt.plot(dataset['1 - Get CH1 Voltage Measurement'], dataset['1 - Get CH1 Current Measurement']*1000)
plt.grid()
plt.xlabel('$U_{pd}[V]$')
plt.ylabel('$I_{pdF}[mA]$')
plt.title('Photoresistor voltage versus forward current')

plt.show()
```

# Photodiode forward and reverse, in dark and illuminated

$\mu$ - diode ideality factor can be calculated

Shockley diode equation: 

$$
I=I_0(e^{\frac{qU}{\mu KT}}-1)
$$
where: 

* $I [A]$ is diode current,
* $I_0 [A]$ is Dark Saturation Current,
* $q [C]$ is electron charge,
* $U [V]$ is voltage applied on the diode,
* $\mu$ is diode ideality factor,
* $K [\frac{J}{K}]$ is the Boltzmann constant,
* $T [K]$ is the temperature.

For _forward bias_, the "-1" is negligible.

Constants:
```{python}
print(f'k = {const.k:.6E}')
print(f'T = {const.T:.2f}')
print(f'q = {const.q:.9E}')
```


Exponential function can be, in general, pictured as:

$$
y = a e^{x b}
$$

so that:

$$
b = \frac{q}{\mu k T}
$$

and:

$$
\boxed{\mu = \frac{q}{bkT}}
$$

```{python}
def exp_func(x, a, b):
  return a * np.exp(b * x)

mu=dict()
```

We will fit an exponential function to our obtained results, for photodiode in forward and reverse case. After fitting, we will get $\mu$ for different illumination cases.

## Under red LED

 Directory _/RED_LED_PD_mj/RED_LED_PD_mj/LVJPD_RED_1cm_BenchVue_30112022G1_

```{python}

dtF = pd.read_csv('datasets/RED_LED_PD_mj/RED_LED_PD_mj/LVJPD_RED_1cm_BenchVue_30112022G1/Ipd_Popt6_UpdF_30112022 2022-11-30 12-02-00 0 2022-11-30 12-42-42 0.csv',
  sep=',', skiprows=5)

dtR = pd.read_csv('datasets/RED_LED_PD_mj/RED_LED_PD_mj/LVJPD_RED_1cm_BenchVue_30112022G1/Ipd_Popt6_UpdR_30112022 2022-11-30 12-02-00 0 2022-11-30 12-03-12 0.csv',
  sep=',', skiprows=6)

# dtR['3 - Get Measurement Value'] = dtR['3 - Get Measurement Value']*(-1)

cF = ['2 - Get Measurement Value', 'Get Measurement Value', '1 - Sweep CH2 Voltage Setting', '1 - Get CH2 Current Measurement']
cR = ['2 - Get Measurement Value', '3 - Get Measurement Value', '1 - Sweep CH2 Voltage Setting', '1 - Get CH2 Current Measurement']

muFR = pys.SweepPlotForwardReverse(dtF, dtR, cF, cR, 0, 27, exp_func)

plt.suptitle("Photodiode U / I characterictics")
plt.title("Variable red LED illumination")

pys.SweepPlotForwardReverse(dtF, dtR, cF, cR, 0, 27, exp_func, yscale='log')

plt.show()

mu['red_F'] = muFR[0]
mu['red_R'] = muFR[1]
```

## Under blue LED

Directory _/LVJ_PD_BVue_l1mm_02122022G2_

In `Ipd_Ufpd_Uled_0_6V 2022-12-02 11-32-27 0.csv` there is only one measured variable. Assumed this dataset is invalid.

```{python}
dataset=pd.read_csv('datasets/LVJ_PD_BVue_l1mm_02122022G2/Ipd_Urpd_Uled_0_6V 2022-12-02 10-29-07 0.csv', sep=',', skiprows=6)

dataset['2 - Get Measurement Value'] = dataset['2 - Get Measurement Value'] * (-1)

pys.SweepPlot(dataset, '2 - Get Measurement Value', '1 - Get Measurement Value', '3 - Sweep CH2 Voltage Setting', '3 - Get CH2 Current Measurement', 2, yScale=10**6, labelScale=1000, curveFitFunc=exp_func)

plt.legend(title='$I_{LED} [mA]$', loc='best')

plt.suptitle('Photodiode reverse voltage versus photodiode reverse current')
plt.title('Variable blue LED illumination, 1 mm distance')
plt.xlabel('$U_{pd} [V]$')
plt.ylabel('$I_{pd} [\u03BCA]$')

plt.show()

ax, mu_calc = pys.SweepPlot(dataset, '2 - Get Measurement Value', '1 - Get Measurement Value', '3 - Sweep CH2 Voltage Setting', '3 - Get CH2 Current Measurement', 2, yScale=10**6, labelScale=1000, curveFitFunc=exp_func)

plt.legend(title='$I_{LED} [mA]$', loc='best')
plt.yscale('log')
plt.suptitle('Photodiode reverse voltage versus photodiode reverse current')
plt.title('Variable blue LED illumination, 1 mm distance')
plt.xlabel('$U_{pd} [V]$')
plt.ylabel('$I_{pd} [\u03BCA]$')

plt.show()
mu['blu_R'] = mu_calc
```

## Under green LED

Directory _GREEN_LED_PD_mj\ILED_Green_Ipd_UpdUF_0_2V_

Ipd_UpdUF_0_2V_G_Popt0_6V 2022-12-06 10-31-19 0.csv
```{python}
dtF = pd.read_csv('datasets\GREEN_LED_PD_mj\ILED_Green_Ipd_UpdUF_0_2V\Ipd_UpdUF_0_2V_G_Popt0_6V 2022-12-06 10-31-19 0.csv', skiprows=6)
dtR = pd.read_csv('datasets\GREEN_LED_PD_mj\IpdUpdR_Green\IpdG_UpdR_V0_5V_Popt0_6V 2022-12-06 11-19-45 0.csv', skiprows=3)

dtR['Get Measurement Value.1'] = dtR['Get Measurement Value.1'] * (-1)

cF = ['2 - Get Measurement Value', '3 - Get Measurement Value', '1 - Sweep CH2 Voltage Setting', '1 - Get CH2 Current Measurement']
cR = ['Get Measurement Value.1', 'Get Measurement Value', 'Sweep CH2 Voltage Setting', 'Get CH2 Current Measurement']

muFR = pys.SweepPlotForwardReverse(dtF, dtR, cF, cR, 0, 27, exp_func)
plt.suptitle("Photodiode U / I characterictics")
plt.title("Variable green LED illumination")
pys.SweepPlotForwardReverse(dtF, dtR, cF, cR, 0, 27, exp_func, yscale='log')
plt.show()

mu['grn_F'] = muFR[0]
mu['grn_R'] = muFR[1]
```

# Photodiode ideality factor

```{python}

fig, axs = plt.subplots(2, 1, sharex=True, figsize=(7,7))

mu_F_all = pd.DataFrame([])
color_names_F = pd.DataFrame([])

mu_R_all = pd.DataFrame([])
color_names_R = pd.DataFrame([])

for key in mu:
  if key.split('_')[1] == 'F':
    axs[0].plot(mu[key]['i_led'], mu[key]['mu'], label=key.split('_')[0])
    color_names_F = pd.concat([pd.DataFrame([key.split('_')[0]]), color_names_F], axis=1)
    mu_F_all = pd.concat([mu[key], mu_F_all], axis=1)

for key in mu:
  if key.split('_')[1] == 'R':
    axs[1].plot(mu[key]['i_led'], mu[key]['mu']*(-1), label=key.split('_')[0])
    color_names_R = pd.concat([pd.DataFrame([key.split('_')[0]]), color_names_R], axis=1)
    mu_R_all = pd.concat([mu[key], mu_R_all], axis=1)

for ax in axs:
  ax.grid()
  ax.legend(loc='best')
  ax.set_ylabel('$\mu [-]$')

axs[0].set_title('Forward bias')
axs[1].set_xlabel('$I_{LED} [mA]$')
axs[1].set_title('Reverse bias')
plt.suptitle('Photodiode ideality factor vs illumination')
fig.tight_layout()
plt.show()

print(color_names_F)
print(mu_F_all)
print(color_names_R)
print(mu_R_all)
```

# LED transient characteristics

Green LED transient datasets couldn't be found, in directory `\datasets\GREEN_LED_PD_mj\ILED_Green_PD_IU_transient` and `datasets\GREEN_LED_PD_mj\ILED_Green_Ipd_UpdUF_0_2V` there are datasets for PD under illumination.

## Blue LED

Directory _LVJ_OPTO_LEDtrans20122022_

```{python}

pys.PlotOscVoltCurr('datasets\LVJ_OPTO_LEDtrans20122022\LVJ_OPTO_LEDtrans20122022', 'led_b_nt_u4v1khz1_', ['1', '3', 'F1'], current_scale=-1000, suptitle='Blue LED, transient, falling edge', title='$U_{gen} \in <0, 4> V$')

pys.PlotOscVoltCurr(path_to_dir='datasets\LVJ_OPHO2022\LVJ_OPHO2022\Blue\B_trans', datasetBaseName='iled_bu5vf1khon4_', endings=('1','3','F1'), suptitle='Blue LED, transient, rising edge', title='$U_{gen} \in <0, 4> V$')

pys.PlotOscVoltCurr('datasets\LVJ_OPTO_LEDtrans20122022\LVJ_OPTO_LEDtrans20122022', 'led_b_tru4v1khz6_', ['1', '3', 'F1'], current_scale=1000, suptitle='Blue LED, transient, square wave', title='$U_{gen} \in <0, 4> V$')

```

## Red LED

Directory _/LvJ_OPTO_2022_GE211222022/LVJ_OPTO_2022_GE21122022/LED_R_0_5Vtr_

```{python}

pys.PlotOscVoltCurr('datasets/LVJ_OPTO_2022_GE21122022/LVJ_OPTO_2022_GE21122022/LED_R_0_5Vtr', 'i_ron_vf_0_5vf1k5_', ('1', '2', 'F1'), resistance=10, filterValues=True, filteringCurrent=(200, 5), filteringVoltage=(200, 5), suptitle='Red LED, transient, rising edge', title='$U_{gen} \in <0, 5> V$')

pys.PlotOscVoltCurr('datasets/LVJ_OPTO_2022_GE21122022/LVJ_OPTO_2022_GE21122022/LED_R_0_5Vtr', 'i_rof_vf_0_5vf1k4_', ('1', '2', 'F1'), resistance=10, filterValues=True, filteringCurrent=(200, 5), filteringVoltage=(200, 5), current_scale=-1000, suptitle='Red LED, transient, falling edge', title='$U_{gen} \in <0, 5> V$')

```

# Photodiode transient characteristics

To calculate current in the circuit, we can use the following equation:
$$
I_{R} = \frac{U_{gen}-U_{pd}}{R}
$$
where $R = 100 \Omega$

## Dark

Directory _/LvJ_OPTO_2022_GE211222022/LVJ_OPTO_2022_GE21122022/PD_dark_

```{python}
pys.PlotOscVoltCurr('datasets\LVJ_OPTO_2022_GE21122022\LVJ_OPTO_2022_GE21122022\PD_dark', 'idtr_v2vf1kon_', ['3','2','F1'],yscale=-1, suptitle='Photodiode dark, transient, falling edge', title='$U_{gen} \ in <-2, 2> V$')

pys.PlotOscVoltCurr('datasets\LVJ_OPTO_2022_GE21122022\LVJ_OPTO_2022_GE21122022\PD_dark', 'idtr_v2vf1kof3_', ['3','2','F1'],yscale=-1, suptitle='Photodiode dark, transient, rising edge', title='$U_{gen} \ in <-2, 2> V$')
```

Directory _/LVJ_OPHO2022/LVJ_OPHO2022/_

```{python}
pys.PlotOscVoltCurr(path_to_dir='datasets/LVJ_OPHO2022/LVJ_OPHO2022/', datasetBaseName='pd_d_f1ku2off1_', endings=('1','3','F1'), yscale=-1, suptitle='Photodiode dark, transient, rising edge', title='$U_{gen} \ in <-2, 2> V$')

pys.PlotOscVoltCurr(path_to_dir='datasets/LVJ_OPHO2022/LVJ_OPHO2022/', datasetBaseName='pd_d_f1ku2onr6_', current_scale=-1, endings=('1','3','F1'), suptitle='Photodiode dark, transient, falling edge', title='$U_{gen} \ in <-2, 2> V$')
```

## Red LED illumination

Directory _/LvJ_OPTO_2022_GE211222022_

```{python}
pys.PlotOscVoltCurr('datasets\LVJ_OPTO_2022_GE21122022\LVJ_OPTO_2022_GE21122022', 'irtr_v3vf1kof15ma_', ['2','3','F1'], suptitle='Photodiode illuminated, transient, falling edge', title='$U_{gen} \in <0, 5> V, I_{LED} = 15 mA$')

pys.PlotOscVoltCurr('datasets\LVJ_OPTO_2022_GE21122022\LVJ_OPTO_2022_GE21122022', 'irtr_v3vf1kon3_', ['2','3','F1'], suptitle='Photodiode illuminated, transient, rising edge', title='$U_{gen} \in <0, 5> V, I_{LED} = 15 mA$')
```

## Blue LED illumination

Directory _LVJ_OPHO2022\LVJ_OPHO2022_

```{python}
pys.PlotOscVoltCurr(path_to_dir='datasets/LVJ_OPHO2022/LVJ_OPHO2022/', datasetBaseName='pd_b_f1ku2of1_', endings=('1','3','F1'), filterValues=True,
filteringCurrent=(200,5), filteringVoltage=(200,5), suptitle='Photodiode blue illuminated, transient, falling edge', title='$U_{gen} \in <-2, 2> V$')

pys.PlotOscVoltCurr(path_to_dir='datasets/LVJ_OPHO2022/LVJ_OPHO2022/', datasetBaseName='pd_b_f1ku2on4_', endings=('1','3','F1'), filterValues=True,
filteringCurrent=(200,5), filteringVoltage=(200,5), suptitle='Photodiode blue illuminated, transient, rising edge', title='$U_{gen} \in <-2, 2> V$')

pys.PlotOscVoltCurr(path_to_dir='datasets/LVJ_OPHO2022/LVJ_OPHO2022/', datasetBaseName='pd_b_r1ku2f_', endings=('1','3','F1'), yscale=-1, suptitle='Photodiode blue illuminated, transient, falling edge', title='U_{gen} \in <0, 4> V')

pys.PlotOscVoltCurr(path_to_dir='datasets/LVJ_OPHO2022/LVJ_OPHO2022/', datasetBaseName='pd_b_r1ku2r_', endings=('1','3','F1'), yscale=-1, suptitle='Photodiode blue illuminated, transient, rising edge', title='U_{gen} \in <0, 4> V')
```

## Green LED illumination

datasets\GREEN_LED_PD_mj\ILED_Green_Ipd_UpdUF_0_2V\Trans_ipd_Ustep_4V_Iled0A_Trace 2022-12-06 12-55-36 0.csv

```{python}
dataset = pd.read_csv('datasets\GREEN_LED_PD_mj\ILED_Green_Ipd_UpdUF_0_2V\Trans_ipd_Ustep_4V_Iled2005mA_Trace 2022-12-06 13-01-29 0.csv', skiprows=1, sep=',', usecols=['Time (s)','1 (VOLT)','2 (AMP)','M1'])

resistance = 100

columnNames = dataset.columns
# Convert the voltage on the resistor (U_generator - U_photodiode) to current [mA] 
dataset[columnNames[3]] = dataset[columnNames[3]] / resistance * 1000
dataset[columnNames[0]] = (dataset[columnNames[0]] - dataset[columnNames[0]][0]) * 10**9# to 

pys.PlotVoltageCurrentDataset(dataset, suptitle='Photodiode green illuminated, transient, falling edge', title='$U_{gen} \in <-1, 1> V, I_{LED} = 20 mA$')
```

# APS

```{python}
# def PlotVoltageTime(dataset:pd.DataFrame, title = ' '):
#     col = dataset.columns
#     # print(dataset[col[0]][0])
#     for i in range(1, len(dataset[col[0]])):
#       dataset[col[0]][i] = dataset[col[0]][i] - dataset[col[0]][0]
#       dataset[col[0]][i] *= 10**6
#     dataset[col[0]][0] = 0
#     plt.figure()
#     plt.plot(dataset[col[0]], dataset[col[1]])
#     plt.ylabel("Voltage [V]")
#     plt.xlabel("Time [us]")
#     plt.title(title)
#     plt.grid()
#     plt.show()

# def PrintDataFromDirectoryVoltageTime(directoryPath: str, filterValues = True):
#     onlyfiles = [
#         f
#         for f in listdir(directoryPath)
#         if isfile(join(directoryPath, f)) and f[-4:] == ".csv"
#     ]
#     print(onlyfiles)
#     for f in onlyfiles:
#         dataset = pd.read_csv(directoryPath + f, sep=',', skiprows=[1])
#         PlotVoltageTime(dataset=dataset, title=f)
# PrintDataFromDirectoryVoltageTime('datasets/APS/')
def PrintDataFromDirectoryVoltageTime(directoryPath: str, filterValues = True):
    onlyfiles = [
        f
        for f in listdir(directoryPath)
        if isfile(join(directoryPath, f)) and f[-4:] == ".csv"
    ]
    files = [
        'Uout_aps_redu5vf1khz1_2.csv',      
        'Ureset_aps_redu5vf1khz1_1.csv',    
        'Vout_apsgreenu5vf1khz3_2.csv',  
        'Vout_apsgreen_u5vf1khz2_2.csv',  
        'Vout_apsrredv5vf1khz2x4_2.csv',
        'Vreset_apsgreenu5vf1khz2_1.csv',
        'Vreset_apsgreenu5vf1khz3_1.csv',
        'Vreset_apsred_v5vf1khz2x2_1.csv',
        'Vreset_apsblue_u5vf1khz6_1.csv',
        'Ureset_apsgreen_v5vf1khz2x1_1.csv'
    ]
    print(onlyfiles)
    pl = list()
    fig, axVoltage = plt.subplots()
    axVoltage.set_ylabel("Voltage [V]")
    axReset = axVoltage.twinx()
    axReset.set_ylabel('Reset voltage [V]')
    for f in onlyfiles:
        if f in files:
            continue
        dataset = pd.read_csv(directoryPath + f, sep=',', skiprows=[1])
        col = dataset.columns
        dataset[col[1]] /= 10
        for i in range(1, len(dataset[col[0]])):
            dataset[col[0]][i] = dataset[col[0]][i] - dataset[col[0]][0]
            dataset[col[0]][i] *= 10**6
        dataset[col[0]][0] = 0
        color = 'black'
        colors = ['red', 'green', 'blue']
        if('reset' in f):
            
            pl.append(axReset.plot(dataset[col[0]], dataset[col[1]], label = 'RESET', color = color))
        else:
            for c in colors:
                if(c in f):
                    color = c
            pl.append(axVoltage.plot(dataset[col[0]], dataset[col[1]], label = color + ' LED', color = color))
        # PlotVoltageTime(dataset=dataset, title=f)
        # break
    lns = pl[0]
    for i in range(1, len(pl)):
        lns +=pl[i]
    labs = [l.get_label() for l in lns]
    axVoltage.legend(lns, labs)
    axVoltage.set_ylabel("Voltage [V]")
    axVoltage.grid()
    plt.yscale = 'log'
    plt.title('APS measurements')

    # fig.tight_layout()
    plt.show()
PrintDataFromDirectoryVoltageTime('datasets/APS/')
```


